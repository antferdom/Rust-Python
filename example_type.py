# Generated by https://quicktype.io
#
# To change quicktype's target language, run command:
#
#   "Set quicktype target language"

from typing import List, Any


class Code:
    code: str
    explanation: str

    def __init__(self, code: str, explanation: str) -> None:
        self.code = code
        self.explanation = explanation


class Text:
    highlight_end: int
    highlight_start: int
    text: str

    def __init__(self, highlight_end: int, highlight_start: int, text: str) -> None:
        self.highlight_end = highlight_end
        self.highlight_start = highlight_start
        self.text = text


class Span:
    byte_end: int
    byte_start: int
    column_end: int
    column_start: int
    expansion: None
    file_name: str
    is_primary: bool
    label: str
    line_end: int
    line_start: int
    suggested_replacement: None
    suggestion_applicability: None
    text: List[Text]

    def __init__(self, byte_end: int, byte_start: int, column_end: int, column_start: int, expansion: None, file_name: str, is_primary: bool, label: str, line_end: int, line_start: int, suggested_replacement: None, suggestion_applicability: None, text: List[Text]) -> None:
        self.byte_end = byte_end
        self.byte_start = byte_start
        self.column_end = column_end
        self.column_start = column_start
        self.expansion = expansion
        self.file_name = file_name
        self.is_primary = is_primary
        self.label = label
        self.line_end = line_end
        self.line_start = line_start
        self.suggested_replacement = suggested_replacement
        self.suggestion_applicability = suggestion_applicability
        self.text = text


class Message:
    rendered: str
    children: List[Any]
    code: Code
    level: str
    message: str
    spans: List[Span]

    def __init__(self, rendered: str, children: List[Any], code: Code, level: str, message: str, spans: List[Span]) -> None:
        self.rendered = rendered
        self.children = children
        self.code = code
        self.level = level
        self.message = message
        self.spans = spans


class Target:
    kind: List[str]
    crate_types: List[str]
    name: str
    src_path: str
    edition: int
    doc: bool
    doctest: bool
    test: bool

    def __init__(self, kind: List[str], crate_types: List[str], name: str, src_path: str, edition: int, doc: bool, doctest: bool, test: bool) -> None:
        self.kind = kind
        self.crate_types = crate_types
        self.name = name
        self.src_path = src_path
        self.edition = edition
        self.doc = doc
        self.doctest = doctest
        self.test = test


class CheckSampleLog:
    reason: str
    package_id: str
    manifest_path: str
    target: Target
    message: Message

    def __init__(self, reason: str, package_id: str, manifest_path: str, target: Target, message: Message) -> None:
        self.reason = reason
        self.package_id = package_id
        self.manifest_path = manifest_path
        self.target = target
        self.message = message
